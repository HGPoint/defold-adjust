-- Logging helpers.
local pretty_print = require('main.pretty_print')
local function lines(str)
	local t = {}
	local function helper(line) table.insert(t, line) return '' end
	helper((str:gsub('(.-)\n', helper)))
	return t
end
local logs_lines = {}
local function log(text)
	local text_lines = lines(text)
	for i = 1, #text_lines do
		table.insert(logs_lines, text_lines[i])
		if #logs_lines > 62 then
			table.remove(logs_lines, 1)
		end
	end
end
local function log_flush()
	gui.set_text(gui.get_node('logs_label'), table.concat(logs_lines, '\n'))
end
local function plog(t)
	log(pretty_print(t))
end

-- Button handlers.

local function init_pressed(self)
	log('init_pressed')
	-- Init Adjust with your app token.
	adjust.init{
		app_token = 'YOUR_APP_TOKEN',
		--is_sandbox = true,
		--app_secret = {id = 0, info1 = 0, info2 = 0, info3 = 0, info4 = 0},
		--default_tracker = '',
		--delay_start = 3,
		--is_device_known = true,
		--event_buffering = true,
		log_level = 'verbose',
		--process_name = 'name',
		--sdk_prefix = '',
		--send_in_background = true,
		--user_agent = 'agent',
		listener = function(event)
			log('adjust listener')
			plog(event)
		end
	}
end

-- Track event.

local function track_event1_pressed(self)
	log('track_event1_pressed')
	adjust.track_event{token = 'EVENT_TOKEN1'}
end

local function track_event2_pressed(self)
	log('track_event2_pressed')
	adjust.track_event{
		token = 'EVENT_TOKEN2',
		callback_id = 'some_id',
		partner_parameters = {
			partner_key1 = 'partner_value1',
			partner_key2 = 'partner_value2'
		},
		callback_parameters = {
			callback_key1 = 'callback_value1',
			callback_key2 = 'callback_value2'
		}
	}
end

local function track_purchase1_pressed(self)
	log('track_purchase1_pressed')
	adjust.track_event{token = 'EVENT_TOKEN1', revenue = 0.99, currency = 'USD'}
end

local function track_purchase2_pressed(self)
	log('track_purchase2_pressed')
	adjust.track_event{token = 'EVENT_TOKEN2', revenue = 2.99, currency = 'EUR'}
end

local function get_stuff_pressed(self)
	log('get_stuff_pressed')
	log('adjust.get_attribution()')
	local attribution = adjust.get_attribution()
	if attribution then
		plog(attribution)
	end
	log('adjust.get_adid() - ' .. tostring(adjust.get_adid() or 'nil'))
	log('adjust.get_amazon_ad_id() - ' .. tostring(adjust.get_amazon_ad_id() or 'nil'))
	log('adjust.get_sdk_version() - ' .. tostring(adjust.get_sdk_version() or 'nil'))
	adjust.get_google_ad_id(function(event)
		log('adjust.get_google_ad_id() - ' .. tostring(event.google_ad_id or 'nil'))
	end)
end

local function set_parameters_pressed(self)
	log('set_parameters_pressed')
	adjust.set_session_parameters{
		callback = {
			callback_some_key = 'callback_some_value'
		},
		partner = {
			partner_some_key = 'partner_some_value',
			partner_some_other_key = 'partner_some_other_value'
		}
	}
end

local is_enabled = true
local function toggle_enabled_pressed(self)
	log('toggle_enabled_pressed')
	is_enabled = not is_enabled
	log('is_enabled: ' .. tostring(is_enabled))
	adjust.set_enabled(is_enabled)
end

local is_offline = false
local function toggle_offline_pressed(self)
	log('toggle_offline_pressed')
	is_offline = not is_offline
	log('is_offline: ' .. tostring(is_offline))
	adjust.set_offline_mode(is_offline)
end

-- Show/hide logs view.

local function logs_pressed(self)
	gui.set_enabled(gui.get_node('logs'), not gui.is_enabled(gui.get_node('logs')))
end

-- GUI init.
function init(self)
	msg.post('.', 'acquire_input_focus')    
	msg.post('@render:', 'clear_color', {color = vmath.vector4(1.0, 1.0, 1.0, 1.0)})
	gui.set_enabled(gui.get_node('logs'), false)
end

-- Update logs view.
local frame = 0
function update(self, dt)
	frame = frame + 1
	if frame == 30 then
		log_flush()
		frame = 0
	end
end

-- Check if a button is clicked.
local function button_click(self, action, node_name, callback)
	if gui.pick_node(gui.get_node(node_name), action.x, action.y) then
		if action.pressed then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1.02, 1.02, 1.02))
		elseif action.released then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1, 1, 1))
			callback(self)
		end
	end
end

local buttons = {
	btn_init = init_pressed,
	btn_track_event1 = track_event1_pressed,
	btn_track_event2 = track_event2_pressed,
	btn_track_purchase1 = track_purchase1_pressed,
	btn_track_purchase2 = track_purchase2_pressed,
	btn_get_stuff = get_stuff_pressed,
	btn_set_parameters = set_parameters_pressed,
	btn_toggle_enabled = toggle_enabled_pressed,
	btn_toggle_offline = toggle_offline_pressed,
	btn_logs = logs_pressed
}
function on_input(self, action_id, action)
	if action_id == hash('touch') then
		for button, callback in pairs(buttons) do
			button_click(self, action, button, callback)
		end
	end
end
